(function(global,factory){typeof exports==="object"&&typeof module!=="undefined"?factory(exports):typeof define==="function"&&define.amd?define(["exports"],factory):(global=global||self,factory(global.burla={}))})(this,function(exports){"use strict";const enc=encodeURIComponent;const defaults={hash:"",path:"/",query:{}};const toString=({origin:origin,path:path,query:query,hash:hash})=>{query=Object.entries(query).sort(([a],[b])=>{if(a<b)return-1;if(a>b)return 1}).map(([key,value])=>`${enc(key)}=${enc(value)}`).join("&");query=query?`?${query.replace(/^\?/,"")}`:"";hash=hash?`#${hash.replace(/^#/,"")}`:"";return origin+path+query+hash};const retrieve=(location,update)=>{const path=location.pathname;const search=new URLSearchParams(location.search.slice(1));const params={};for(const[key,value]of search.entries()){if(/\[\]$/.test(key)){throw new Error("Arrays in queries are not supported")}if(params[key]){throw new Error(`The URL query param '${key}' is duplicated`)}params[key]=value}const query=new Proxy(params,{get:(orig,key)=>params[key],set:(orig,key,value)=>{return update({query:{...params,[key]:value}},location)},deleteProperty:(orig,key)=>{const{[key]:abc,...query}=params;return update({query:query},location)}});const hash=(location.hash||"").replace(/^#/,"");const origin=location.origin;const href=toString({origin:origin,path:path,query:query,hash:hash});return{href:href,origin:origin,path:path,query:query,hash:hash}};const update=(data,location)=>{const url=toString({...retrieve(location,update),...data});if(location===window.location){window.history.pushState({url:url},null,url)}else{location.href=url}return true};const URL=(location=window.location,{stable:stable=true}={})=>{if(typeof location==="string"){location=new window.URL(location)}toString(retrieve(location,update));const get=(orig,key)=>{if(orig[key])return orig[key];if(key==="pathname")key="path";return retrieve(location,update)[key]};const set=(orig,key,value)=>{if(key==="pathname")key="path";return update({[key]:value},location)};const deleteProperty=(orig,key)=>{if(key==="pathname")key="path";return update({[key]:defaults[key]},location)};return new Proxy({URL:URL},{get:get,set:set,deleteProperty:deleteProperty})};var index=URL(window.location);exports.URL=URL;exports.default=index;Object.defineProperty(exports,"__esModule",{value:true})});