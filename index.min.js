(function(global,factory){typeof exports==="object"&&typeof module!=="undefined"?factory(exports):typeof define==="function"&&define.amd?define(["exports"],factory):(global=global||self,factory(global.burla={}))})(this,function(exports){"use strict";var parse=options=>{let result;switch(options.arrayFormat){case"index":return(key,value,accumulator)=>{result=/\[(\d*)\]$/.exec(key);key=key.replace(/\[\d*\]$/,"");if(!result){accumulator[key]=value;return}if(accumulator[key]===undefined){accumulator[key]={}}accumulator[key][result[1]]=value};case"bracket":return(key,value,accumulator)=>{result=/(\[\])$/.exec(key);key=key.replace(/\[\]$/,"");if(!result){accumulator[key]=value;return}if(accumulator[key]===undefined){accumulator[key]=[value];return}accumulator[key]=[].concat(accumulator[key],value)};case"comma":return(key,value,accumulator)=>{const isArray=typeof value==="string"&&value.split("").indexOf(",")>-1;const newValue=isArray?value.split(","):value;accumulator[key]=newValue};default:return(key,value,accumulator)=>{if(accumulator[key]===undefined){accumulator[key]=value;return}accumulator[key]=[].concat(accumulator[key],value)}}};const enc=encodeURIComponent;const defaults={hash:"",path:"/",query:{}};const toString=({origin:origin,path:path,query:query,hash:hash})=>{query=Object.entries(query).sort(([a],[b])=>{if(a<b)return-1;if(a>b)return 1}).map(([key,value])=>`${enc(key)}=${enc(value)}`).join("&");query=query?`?${query.replace(/^\?/,"")}`:"";hash=hash?`#${hash.replace(/^#/,"")}`:"";return origin+path+query+hash};const retrieve=(location,update,options)=>{const path=location.pathname;const params={};const parser=parse(options);const search=new URLSearchParams(location.search.slice(1));for(const[key,value]of search.entries()){parser(key,value,params)}const query=new Proxy(params,{get:(orig,key)=>params[key],set:(orig,key,value)=>{return update({query:{...params,[key]:value}},location,options)},deleteProperty:(orig,key)=>{const{[key]:abc,...query}=params;return update({query:query},location,options)}});const hash=(location.hash||"").replace(/^#/,"");const origin=location.origin;const href=toString({origin:origin,path:path,query:query,hash:hash});return{href:href,origin:origin,path:path,query:query,hash:hash}};const update=(data,location,options)=>{const url=toString({...retrieve(location,update,options),...data});if(location===window.location){window.history.pushState({url:url},null,url)}else{location.href=url}return true};const URL=(location=window.location,options={arrayFormat:"bracket"})=>{if(typeof location==="string"){location=new window.URL(location)}toString(retrieve(location,update,options));const get=(orig,key)=>{if(orig[key])return orig[key];if(key==="pathname")key="path";return retrieve(location,update,options)[key]};const set=(orig,key,value)=>{if(key==="pathname")key="path";return update({[key]:value},location,options)};const deleteProperty=(orig,key)=>{if(key==="pathname")key="path";return update({[key]:defaults[key]},location,options)};URL.URL=URL;return new Proxy(URL,{get:get,set:set,deleteProperty:deleteProperty})};var index=URL(window.location);exports.URL=URL;exports.default=index;Object.defineProperty(exports,"__esModule",{value:true})});